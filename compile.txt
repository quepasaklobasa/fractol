gcc main.c ft_string_utils.c ft_color.c ft_error.c ft_events.c ft_init.c ft_math.c ft_render.c -Lminilibx-linux -lmlx_Linux -lX11 -lXext -lm -o fractol

Mandatory Requirements

 Graphics:
 Displays at least one graphic window.
 ESC key properly exits the program.
 Mouse wheel zooms in and out, with visible visual evolution.
 At least one fractal reacts visually to mouse movement.
 Implement the following fractals:

 Julia set:
 Evolves when moving the mouse.
 Zoom in/out works and repeats the basic pattern.
 Matches general visuals of a Julia set.
 Color variation appears on the outskirts.
 Mandelbrot set:
 Zoom in/out works and repeats the basic pattern.
 Matches general visuals of a Mandelbrot set.
 Color variation appears on the outskirts.
 At least one additional fractal:
 Zoom in/out works and repeats the basic pattern.
 Matches visuals of a recognized fractal.
 
 Parameter handling:
 Correctly handles invalid parameters.
 Properly implements required parameters.
Bonus Features
 Zoom follows the mouse pointer (not just centered).
 Navigation with arrow keys works seamlessly with zoom.
 Enhanced color palette:
 Visually stunning (beautiful or psychedelic).
 Allows dynamic changes to colors.
 Additional fractals:
 More than the required three.
 All implemented fractals work and are visually appealing.
 3D fractals rendered properly.
 Multiple windows displaying different fractals simultaneously.
 Use of parallel or GPU computing to optimize performance.
 Other creative features not listed but significantly enhance the project.
 
 Research Topics for Bonuses
Zoom and Navigation Enhancements:

Research how to map mouse pointer coordinates to fractal space.
Study event handling for keyboard and mouse input in your graphics library (e.g., MLX or equivalent).
Color Palette:

Learn about gradient generation algorithms.
Explore HSV (Hue, Saturation, Value) color models for dynamic color schemes.
Research how to use real-time color transformations for an interactive experience.
Additional Fractals:

Explore famous fractals like:
Burning Ship fractal.
Newton fractals.
Sierpinski Carpet or Triangle.
Study their mathematical equations and how to render them.
3D Fractals:

Learn about the Mandelbulb or other 3D fractals.
Understand 3D rendering basics (e.g., projection, lighting, and shading).
Consider using libraries like OpenGL for advanced rendering.
Parallel or GPU Computing:

Research multithreading in C (e.g., using pthreads).
Explore GPU programming with OpenCL or CUDA to parallelize fractal calculations.
Multiple Windows:

Check your graphics libraryâ€™s support for managing multiple windows.
Learn how to handle event loops for independent windows.
Creative Features:

Investigate dynamic fractal animations (e.g., parameter morphing over time).
Consider implementing user-customizable fractals by tweaking equations or settings.

