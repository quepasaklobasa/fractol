/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fractol.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: javi <javi@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/19 21:05:11 by jcouto            #+#    #+#             */
/*   Updated: 2025/02/03 02:11:51 by javi             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FRACTOL_H
# define FRACTOL_H

# include <stdio.h>
# include <stdlib.h>
# include <unistd.h>
# include <math.h>
# include <X11/X.h>
# include <X11/keysym.h>
# include "minilibx-linux/mlx.h"

# define WIDTH 800
# define HEIGHT 800

# define ESC_KEY 65307
# define LEFT_ARROW 65361
# define RIGHT_ARROW 65363
# define UP_ARROW 65362
# define DOWN_ARROW 65364
# define M_KEY 109
# define L_KEY 108
# define SCROLL_UP 4
# define SCROLL_DOWN 5
# define R_KEY 114
# define I_KEY 105
# define O_KEY 111
# define C_KEY 99
# define V_KEY 118
# define I_KEY 105
# define O_KEY 111

# define BLACK       0x000000  
# define WHITE       0xFFFFFF 
# define RED         0xFF0000 
# define GREEN       0x00FF00
# define BLUE        0x0000FF
# define PSYCHEDELIC_RED     0xFF4500 
# define PSYCHEDELIC_PINK    0xFF1493
# define PSYCHEDELIC_PURPLE  0x9400D3
# define PSYCHEDELIC_YELLOW  0xFFD700
# define PSYCHEDELIC_GREEN   0x7FFF00
# define PSYCHEDELIC_BLUE    0x1E90FF
# define PSYCHEDELIC_CYAN    0x00FFFF
# define PSYCHEDELIC_ORANGE  0xFF6347
# define PSYCHEDELIC_TEAL    0x008080
# define PSYCHEDELIC_LIME    0x32CD32

typedef enum e_fractal_type
{
	Mandelbrot,
	Julia,
	Newton
}	t_fractal_type;

typedef struct s_img
{
	void	*img_ptr;
	char	*pixel_ptr;
	int		bpp;
	int		endian;
	int		line_len;
}	t_img;

typedef struct s_complex
{
	double	x;
	double	y;
}	t_complex;

typedef struct s_fractal
{
	void	*mlx_connection;
	void	*mlx_window;
	t_img	img;
	t_complex			min;
	t_complex			max;
	t_fractal_type 		type;
	int 	max_iterations;
	double  zoom;
    double		offset_x;
    double		offset_y;
	double	c_jx;
	double	c_jy;
	double	mouse_x;
	double	mouse_y;
	t_complex 	z_newton;
	double	n_tol;
	t_complex	n_co[5];
	t_complex	c_iter;
	t_complex	c_range;
	int		color_shift;
	int		color_cycle;
}	t_fractal;

int		ft_strncmp(const char *s1, const char *s2, size_t n);
void	ft_putendl_fd(char *s, int fd);
void	fractal_init(t_fractal *fractal);
double	map(double unscaled_num, double new_min, double new_max, double old_min, double old_max);
t_complex complex_add(t_complex a, t_complex b);
t_complex complex_square(t_complex a);
void	events_init(t_fractal *fractal);
void	data_init(t_fractal *fractal);
int		key_press(int keycode, t_fractal *fractal);
int		close_window(t_fractal *fractal);
int		mouse_press(int button, int x, int y, t_fractal *fractal);;
void	ft_pixel_put(t_fractal *fractal, int x, int y, int color);
void	handle_pixel(t_fractal *fractal, int x, int y, int max_iterations);
void	fractal_render(t_fractal *fractal);
double	ft_atod(const char *str);
int		mouse_move(int x, int y, t_fractal *fractal);
void	update_max_iterations(t_fractal *fractal);
int		cycle_color(t_fractal *fractal);
int		color_palette(t_fractal *fractal);
t_complex	complex_mult(t_complex a, t_complex b);
t_complex	complex_div(t_complex a, t_complex b);
t_complex	newton_method(t_complex z, t_fractal *fractal);
void	errormessage(void);
void	instructions(void);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_color.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jcouto <jcouto@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/28 18:06:41 by jcouto            #+#    #+#             */
/*   Updated: 2025/01/30 17:42:29 by jcouto           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	color_palette(t_fractal *fractal)
{
	static int	colors[] = {
		PSYCHEDELIC_BLUE, PSYCHEDELIC_CYAN, PSYCHEDELIC_GREEN,
		PSYCHEDELIC_ORANGE, PSYCHEDELIC_TEAL, PSYCHEDELIC_LIME,
		PSYCHEDELIC_PINK, PSYCHEDELIC_PURPLE, PSYCHEDELIC_RED,
		PSYCHEDELIC_YELLOW
	};
	static int	index = 0;

	fractal->color_shift = colors[index];
	index = (index + 1) % (sizeof(colors) / sizeof(colors[0]));
	return (0);
}

int	cycle_color(t_fractal *fractal)
{
	static int	colors[] = {
		BLACK, WHITE, RED, GREEN, BLUE
	};
	static int	index = 0;

	fractal->color_cycle = colors[index];
	index = (index + 1) % (sizeof(colors) / sizeof(colors[0]));
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_error.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: javi <javi@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/03 02:14:59 by javi              #+#    #+#             */
/*   Updated: 2025/02/03 02:15:00 by javi             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

void errormessage(void)
{
    ft_putendl_fd("Usage: ./fractol Mandelbrot", 2);
    ft_putendl_fd("./fractol Julia <real> <imaginary>", 2);
    ft_putendl_fd("./fractol Newton", 2);
    ft_putendl_fd("Example: ./fractol Julia -0.7 0.27015", 2);
}
void instructions(void)
{
    ft_putendl_fd("Instructions:", 1);
    ft_putendl_fd("Zoom: Mouse wheel", 1);
    ft_putendl_fd("Move: Arrow keys", 1);
    ft_putendl_fd("Change color: C", 1);
    ft_putendl_fd("Change color palette: V", 1);
    ft_putendl_fd("Increase max iterations: M", 1);
    ft_putendl_fd("Decrease max iterations: L", 1);
    ft_putendl_fd("Reset: R", 1);
    ft_putendl_fd("Exit: ESC", 1);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_events.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: javi <javi@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/28 18:06:48 by jcouto            #+#    #+#             */
/*   Updated: 2025/02/03 01:31:34 by javi             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	close_window(t_fractal *f)
{
	mlx_destroy_image(f->mlx_connection, f->img.img_ptr);
	mlx_destroy_window(f->mlx_connection, f->mlx_window);
	mlx_destroy_display(f->mlx_connection);
	free(f->mlx_connection);
	exit(0);
	return (0);
}

int	key_press(int keycode, t_fractal *f)
{
	if (keycode == ESC_KEY)
		close_window(f);
	else if (keycode == LEFT_ARROW)
		f->offset_x -= (.5 * f->zoom);
	else if (keycode == UP_ARROW)
		f->offset_y -= (.5 * f->zoom);
	else if (keycode == RIGHT_ARROW)
		f->offset_x += (.5 * f->zoom);
	else if (keycode == DOWN_ARROW)
		f->offset_y += (.5 * f->zoom);
	else if (keycode == M_KEY)
		f->max_iterations += 10;
	else if (keycode == L_KEY)
		f->max_iterations -= 10;
	else if (keycode == R_KEY)
		data_init(f);
	else if (keycode == C_KEY)
		cycle_color(f);
	else if (keycode == V_KEY)
		color_palette(f);
	fractal_render(f);
	return (0);
}

int	mouse_press(int button, int x, int y, t_fractal *f)
{
	double	zoom_factor;
	double	mouse_fractal_x;
	double	mouse_fractal_y;

	mouse_fractal_x = map(x, f->min.x, f->max.x, 0, WIDTH);
	mouse_fractal_y = map(y, f->min.y, f->max.y, 0, HEIGHT);
	zoom_factor = 1.1;
	if (button == SCROLL_DOWN)
	{
		f->zoom *= zoom_factor;
		f->offset_x += (mouse_fractal_x - f->offset_x) * (1 - 1 / zoom_factor);
		f->offset_y += (mouse_fractal_y - f->offset_y) * (1 - 1 / zoom_factor);
	}
	else if (button == SCROLL_UP)
	{
		f->zoom /= zoom_factor;
		f->offset_x -= (mouse_fractal_x - f->offset_x) * (1 - zoom_factor);
		f->offset_y -= (mouse_fractal_y - f->offset_y) * (1 - zoom_factor);
	}
	update_max_iterations(f);
	fractal_render(f);
	return (0);
}

int	mouse_move(int x, int y, t_fractal *f)
{
	static int	last_x = -1, last_y = -1;

	if (f->type == Julia && (abs(x - last_x) > 15 || abs(y - last_y) > 15))
	{
		f->c_jx = map(x, f->min.x, f->max.x, 0, WIDTH) * f->zoom + f->offset_x;
		f->c_jy = map(y, f->min.y, f->max.y, 0, HEIGHT) * f->zoom + f->offset_y;
		fractal_render(f);
		last_x = x;
		last_y = y;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_init.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: javi <javi@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/19 21:55:55 by jcouto            #+#    #+#             */
/*   Updated: 2025/02/03 02:20:50 by javi             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

void	fractal_init(t_fractal *f)
{
	f->mlx_connection = mlx_init();
	if (f->mlx_connection == NULL)
	{
		ft_putendl_fd("Error: mlx_init() failed", 2);
		exit(1);
	}
	f->mlx_window = mlx_new_window(f->mlx_connection, WIDTH, HEIGHT, "Fractol");
	if (f->mlx_window == NULL)
	{
		ft_putendl_fd("Error: mlx_new_window() failed", 2);
		mlx_destroy_display(f->mlx_connection);
		free(f->mlx_connection);
		exit(1);
	}
	f->img.img_ptr = mlx_new_image(f->mlx_connection, WIDTH, HEIGHT);
	if (f->img.img_ptr == NULL)
	{
		ft_putendl_fd("Error: mlx_new_image() failed", 2);
		mlx_destroy_window(f->mlx_connection, f->mlx_window);
		mlx_destroy_display(f->mlx_connection);
		free(f->mlx_connection);
		exit(1);
	}
	f->img.pixel_ptr = mlx_get_data_addr(f->img.img_ptr, &f->img.bpp, &f->img.line_len, &f->img.endian);
	events_init(f);
	data_init(f);

}
void	events_init(t_fractal *f)
{
	mlx_hook(f->mlx_window, KeyPress, KeyPressMask, key_press, f);
	mlx_hook(f->mlx_window, DestroyNotify, StructureNotifyMask, close_window, f);
	mlx_hook(f->mlx_window, ButtonPress, ButtonPressMask, mouse_press, f);
	mlx_hook(f->mlx_window, MotionNotify, PointerMotionMask, mouse_move, f);
}

void	data_init(t_fractal *f)
{
	f->max_iterations = 42;
	f->zoom = 1.0;
	f->offset_x = -0.5;
	f->offset_y = 0.0;
	f->min.x = -2.0;
	f->min.y = 2.0;
	f->max.x = 2.0;
	f->max.y = 2.0;
	f->color_shift = PSYCHEDELIC_BLUE;
	f->color_cycle = BLACK;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_math.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jcouto <jcouto@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/28 18:06:57 by jcouto            #+#    #+#             */
/*   Updated: 2025/01/28 18:06:58 by jcouto           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

double map(double unscaled_num, double new_min, double new_max, double old_min, double old_max)
{
    return (new_max - new_min) * (unscaled_num - old_min) / (old_max - old_min) + new_min;
}

t_complex complex_add(t_complex a, t_complex b)
{
    t_complex result;

    result.x = a.x + b.x;
    result.y = a.y + b.y;
    return (result);
}

t_complex complex_square(t_complex a)
{
    t_complex result;

    result.x = (a.x * a.x) - (a.y * a.y);
    result.y = 2 * a.x * a.y;
    return (result);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_newton_utils.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: javi <javi@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/03 01:59:05 by javi              #+#    #+#             */
/*   Updated: 2025/02/03 02:05:48 by javi             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

t_complex   complex_mult(t_complex a, t_complex b)
{
	t_complex	result;

	result.x = a.x * b.x - a.y * b.y;
	result.y = a.x * b.y + a.y * b.x;
	return (result);
}
t_complex	complex_div(t_complex a, t_complex b)
{
	t_complex	result;
	double		denominator;

	denominator = b.x * b.x + b.y * b.y;
	result.x = (a.x * b.x + a.y * b.y) / denominator;
	result.y = (a.y * b.x - a.x * b.y) / denominator;
	return (result);
}
t_complex	newton_method(t_complex z, t_fractal *f)
{
	t_complex	numerator;
	t_complex	denominator;
	t_complex	delta;
	int			iterations;

	iterations = 0;
	while (iterations < f->max_iterations)
	{
		numerator = complex_add(complex_add(complex_add(
						(t_complex){-1.0, 0.0}, complex_mult(z, z)),
					complex_mult(z, complex_mult(z, z))), (t_complex){0.0, 0.0});
		denominator = complex_add(complex_add((t_complex){0.0, 0.0},
					complex_mult((t_complex){2.0, 0.0}, z)),
				complex_mult((t_complex){3.0, 0.0}, complex_mult(z, z)));
		if (denominator.x == 0.0 && denominator.y == 0.0)
			break ;
		delta = complex_div(numerator, denominator);
		z = complex_add(z, (t_complex){-delta.x, -delta.y});
		if (complex_abs(delta) < f->newton_tolerance)
			break ;
		iterations++;
	}
	return (z);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_render.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: javi <javi@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/28 18:07:01 by jcouto            #+#    #+#             */
/*   Updated: 2025/02/03 02:22:00 by javi             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

void    ft_pixel_put(t_fractal *f, int x, int y, int color)
{
    char    *pixel;

    pixel = f->img.pixel_ptr + (y * f->img.line_len + x * (f->img.bpp / 8));
    *(unsigned int *)pixel = color;
}

void    handle_pixel(t_fractal *f, int x, int y, int max_iterations)
{
    t_complex c;
    t_complex z;
    int iterations;
    int color;

    iterations = 0;
    c.x = map(x, f->min.x, f->max.x, 0, WIDTH) * f->zoom + f->offset_x;
    c.y = map(y, f->min.y, f->max.y, 0, HEIGHT) * f->zoom + f->offset_y;

    if (f->type == Mandelbrot)
    {
        z.x = c.x;
        z.y = c.y;
    }
    else if (f->type == Julia)
    {
        z.x = map(x, f->min.x, f->max.x, 0, WIDTH) * f->zoom + f->offset_x;
        z.y = map(y, f->min.y, f->max.y, 0, HEIGHT) * f->zoom + f->offset_y;
        c.x = f->c_jx;
        c.y = f->c_jy;
    }

    while (iterations < max_iterations)
    {
        z = complex_add(complex_square(z), c);
        if ((z.x * z.x + z.y * z.y) > 4)
        {
            color = map(iterations, f->color_cycle, f->color_shift, 0, f->max_iterations);
            ft_pixel_put(f, x, y, color);
            return;
        }
        iterations++;
    }
    ft_pixel_put(f, x, y, BLACK);
}
void fractal_render(t_fractal *f)
{
    int x;
    int y;
    
    y = 0;
    while (y < HEIGHT)
    {
        x = 0;
        while (x < WIDTH)
        {
            handle_pixel(f, x, y, f->max_iterations);
            x++;
        }
        y++;
    }
    mlx_put_image_to_window(f->mlx_connection, f->mlx_window, f->img.img_ptr, 0, 0);
}
void update_max_iterations(t_fractal *f)
{
    f->max_iterations = (int)(42 + 50 * log(f->zoom + 1.0));
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_string_utils.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jcouto <jcouto@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/19 21:30:12 by jcouto            #+#    #+#             */
/*   Updated: 2025/01/28 18:07:06 by jcouto           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	unsigned int	i;

	if (!s1 || !s2 || n == 0)
		return (0);
	i = 0;
	while ((s1[i] || s2[i]) && i < n)
	{
		if (s1[i] != s2[i])
			return ((unsigned char)s1[i] - (unsigned char)s2[i]);
		i++;
	}
	return (0);
}

void	ft_putendl_fd(char *s, int fd)
{
	unsigned int	i;

	if (!s || fd < 0)
		return ;

	i = 0;
	while (s[i])
	{
		write(fd, &s[i], 1);
		i++;
	}
	write(fd, "\n", 1);
}
double	ft_atod(const char *str)
{
	double	result;
	double	sign;
	double	decimal;
	int		i;

	result = 0;
	sign = 1;
	decimal = 0;
	i = 0;
	if (!str)
		return (0);
	if (str[i] == '-')
	{
		sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		result = result * 10 + str[i] - '0';
		i++;
	}
	if (str[i] == '.')
	{
		i++;
		while (str[i] >= '0' && str[i] <= '9')
		{
			result = result * 10 + str[i] - '0';
			decimal++;
			i++;
		}
	}
	while (decimal--)
		result /= 10;
	return (result * sign);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: javi <javi@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/19 21:03:02 by jcouto            #+#    #+#             */
/*   Updated: 2025/02/03 02:09:22 by javi             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"

int main (int ac, char **av)
{
	t_fractal	f;

	if (ac == 2 && !ft_strncmp(av[1], "Mandelbrot", 10))
    {
        f.type = Mandelbrot;
    }
    else if (ac == 4 && !ft_strncmp(av[1], "Julia", 5))
    {
        f.type = Julia;
        f.c_jx = ft_atod(av[2]);
        f.c_jy = ft_atod(av[3]);
    }
    else
    {
        errormessage();
        return (1);
    }
    instructions();
    fractal_init(&f);
	fractal_render(&f);
    mlx_loop(f.mlx_connection);
    return (0);
}